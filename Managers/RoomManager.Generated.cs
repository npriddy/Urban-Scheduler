
#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.Linq;
using System.Linq;
using System.Text;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Urban.Data
{
    /// <summary>
    /// The manager class for Room.
    /// </summary>
    public partial class RoomManager 
        : CodeSmith.Data.EntityManagerBase<UrbanDataManager, Urban.Data.Room>
    {
        /// <summary>
        /// Initializes the <see cref="RoomManager"/> class.
        /// </summary>
        /// <param name="manager">The current manager.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public RoomManager(UrbanDataManager manager)
            : base(manager)
        {
            OnCreated();
        }

        /// <summary>
        /// Gets the current context.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        protected Urban.Data.UrbanDataContext Context
        {
            get { return Manager.Context; }
        }
        
        /// <summary>
        /// Gets the entity for this manager.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        protected System.Data.Linq.Table<Urban.Data.Room> Entity
        {
            get { return Manager.Context.Room; }
        }
        
        
        /// <summary>
        /// Creates the key for this entity.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static CodeSmith.Data.IEntityKey<int> CreateKey(int id)
        {
            return new CodeSmith.Data.EntityKey<int>(id);
        }
        
        /// <summary>
        /// Gets an entity by the primary key.
        /// </summary>
        /// <param name="key">The key for the entity.</param>
        /// <returns>
        /// An instance of the entity or null if not found.
        /// </returns>
        /// <remarks>
        /// This method is expecting key to be of type IEntityKey&lt;int&gt;.
        /// </remarks>
        /// <exception cref="ArgumentException">Thrown when key is not of type IEntityKey&lt;int&gt;.</exception>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public override Urban.Data.Room GetByKey(CodeSmith.Data.IEntityKey key)
        {
            if (key is CodeSmith.Data.IEntityKey<int>)
            {
                var entityKey = (CodeSmith.Data.IEntityKey<int>)key;
                return GetByKey(entityKey.Key);
            }
            else
            {
                throw new ArgumentException("Invalid key, expected key to be of type IEntityKey<int>");
            }
        }
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public Urban.Data.Room GetByKey(int id)
        {
            if (Context.LoadOptions == null) 
                return Query.GetByKey.Invoke(Context, id);
            else
                return Entity.FirstOrDefault(r => r.Id == id);
        }
        
        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public int Delete(int id)
        {
            return Entity.Delete(r => r.Id == id);
        }
        /// <summary>
        /// Gets a query by an index.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public IQueryable<Urban.Data.Room> GetByBuildingID(int? buildingID)
        {
            if (Context.LoadOptions == null) 
                return Query.GetByBuildingID.Invoke(Context, buildingID);
            else
                return Entity.Where(r => r.BuildingID == buildingID);
        }
        /// <summary>
        /// Gets a query by an index.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public IQueryable<Urban.Data.Room> GetByRoomTypeID(int roomTypeID)
        {
            if (Context.LoadOptions == null) 
                return Query.GetByRoomTypeID.Invoke(Context, roomTypeID);
            else
                return Entity.Where(r => r.RoomTypeID == roomTypeID);
        }

        #region Extensibility Method Definitions
        /// <summary>Called when the class is created.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        partial void OnCreated();
        #endregion
        
        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
            internal static readonly Func<Urban.Data.UrbanDataContext, int, Urban.Data.Room> GetByKey = 
                System.Data.Linq.CompiledQuery.Compile(
                    (Urban.Data.UrbanDataContext db, int id) => 
                        db.Room.FirstOrDefault(r => r.Id == id));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
            internal static readonly Func<Urban.Data.UrbanDataContext, int?, IQueryable<Urban.Data.Room>> GetByBuildingID = 
                System.Data.Linq.CompiledQuery.Compile(
                    (Urban.Data.UrbanDataContext db, int? buildingID) => 
                        db.Room.Where(r => r.BuildingID == buildingID));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
            internal static readonly Func<Urban.Data.UrbanDataContext, int, IQueryable<Urban.Data.Room>> GetByRoomTypeID = 
                System.Data.Linq.CompiledQuery.Compile(
                    (Urban.Data.UrbanDataContext db, int roomTypeID) => 
                        db.Room.Where(r => r.RoomTypeID == roomTypeID));

        }
        #endregion
    }
}
#pragma warning restore 1591

